<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:p="http://www.springframework.org/schema/p"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
   <!-- 사용자 정의 메모리 할당 -->
   <context:component-scan base-package="com.sist.*"></context:component-scan>
   <!-- 
         선택적인 메모리 할당
         @Component: 일반 클래스 (~Manager,MainClass)
         @Repository : DAO(저장소)
         @Service : BI (DAO를 여러개 통합후 사용)
         ==================================================================
         @Controller: Model => 화면 제어
         @RestController : Mode => ResultFul
                           => 다른 프로그램과 연결
                           => 자바 <=> javaScript
                                   JSON
                              => GET / POST / PUT / DELETE
         @ControllerAdvice : 웹에서 통합된 예외처리
         ================================================================> Web에서만 사용
         @Configuration : 5버전 권장
                      => XML 대신 자바 대체 => 클래스 등록!
                      
         ====> 클래스 객체 생성 시 사용 (메모리 할당)
         
         *** 스프링 = 클래스 관리자
            => 생성 / 소멸 / 필요시에는 멤버변수 초기화
                       ==================== 값 주입
                       => setter, 생성자 매개변수 
         <메모리 할당 시 필요한 데이터 주입 시 사용> 
         => DI의 작은 의미 : 멤버변수의 초기화
            DI의 큰 의미 : 여러개의 클래스 연관관계 설정 => 메뉴얼! 
         @Autowired : 스프링 안에 이미 생성되어있는 클래스 객체 주소를 찾아서 자동 주입
                  => getBean() 대신 스프링 자체에서 찾아줌 
         @PostConstruct : 메소드 호출 가능 
                      생성 시 자동 호출
                      => init-method
          @PreDestroy : 소멸 시 자동 호출
                       => destroy-method
          @Resource : 선택적으로 객체 선택 => 1.8까지만 사용이 가능
          1.8버전이 가장 호환성이 좋다
             => 스프링부트 (3.0) , 스프링 6 : 람다
                => @RequestMapping 제거
                  => @GetMapping / @PostMapping
             
            메모리 할당 요청
            ============
            1. 클래스 단위 <bean>
                => 라이브러리 클래스 (MyBatis)
            2. 패키지 단위 <context:component-scan base-package="">
                => 사용자 정의 클래스
                => ~VO는 클래스 => 데이터형
                => 대부분은 싱글턴
                <bean scope="prototype">
                @Component
                @Scope("prototype") => clone() : 메모리 복제
          
    -->
   <!-- 데이터베이스 관련 -->
   <!-- 데이터베이스 연결과 관련된 정보 모음 -->
   <bean id="ds" class="org.apache.commons.dbcp.BasicDataSource"
	p:driverClassName="oracle.jdbc.driver.OracleDriver"
	p:url="jdbc:oracle:thin:@localhost:1521:XE"
	p:username="hr"
	p:password="happy"

	/>
<!-- mybatis전송 
getconnection/ disconnection
-->   
 <bean id="ssf" class="org.mybatis.spring.SqlSessionFactoryBean"
	 p:dataSource-ref="ds"

	 />
   
<!-- interface (mapper)를 구현하는 클래스로 전송 -->   
<bean id="mapper" class="org.mybatis.spring.mapper.MapperFactoryBean"
p:sqlSessionFactory-ref="ssf"
p:mapperInterface="com.sist.mapper.EmpMapper"
/>

<!-- 사용자 정의 DAO로 mapper객체 전송 요청
=> xml 코딩대신 = > 어노테이션 @Repository,  autowired 
 -->

</beans>